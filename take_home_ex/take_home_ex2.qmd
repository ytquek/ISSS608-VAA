---
title: "Take Home Exercise 2"
author: "You Ting QUEK"
date: "May 2, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# Objective

In this particular section, we will revisit Take-home Exercise 1 which visualises trends in the Real Estate Market of Q1 2024.

We will pick a visualisation which the author can learn from to improve on it's clarity and aesthetics by way of using the best practices for visualizing data.

# Original Visualisation

We will focus on [Arya Siahaan](https://isss608-aryasiahaan.netlify.app/take-home_ex/take-home_ex01/take-home_ex01) visualization of "SALES DISTRIBUTION BASED ON PROPERTY TYPE IN SINGAPORE PRIVATE RESIDENTIAL MARKET".

![](images/Screenshot%202024-05-02%20at%208.36.02%20PM.png){fig-align="center"}

## Review

::: panel-tabset
## The Good 

-   The interpretation of the data is very forward at a glance.

-   The results are also extremely straightforward, we are able to tell which property garners the highest volume of sales.

## The Not-So-Good

-   There is not much data nor further story telling to be had and this can be achieved easily with a simple excel function.

-   There is no interaction with the graphs hence, it is not possible to tell the exact numbers for each property type.

-   In addition, it is also possible to merge both of Aryan's graph together such that they show a comprehensive picture of the private estate resale market.
:::

## How might we do it differntly.

Firstly, we have to ascertain the story point which we would like to tell which is:

What is the monthly sales volume of each property type in Singapore?

TO do that, we will need the following datapoints from the RELIS database:

-   **Property Type**

-   **Sale Date**

-   **Transacted Price ($)**


# Data preperation

## Loading the required packages
```{r}
pacman::p_load(tidyverse, scales, patchwork, ggtext, DT)
```

## Data Extraction
First we will import the data from the 5 csv files
```{r}
# Define the paths to the individual CSV files
file1 <- "data/ResidentialTransaction20240308160536.csv"
file2 <- "data/ResidentialTransaction20240308160736.csv"
file3 <- "data/ResidentialTransaction20240308161009.csv"
file4 <- "data/ResidentialTransaction20240308161109.csv"
file5 <- "data/ResidentialTransaction20240414220633.csv"

# Reading the individual CSV files
data1 <- read_csv(file1)
data2 <- read_csv(file2)
data3 <- read_csv(file3)
data4 <- read_csv(file4)
data5 <- read_csv(file5)

# Combining the data frames into one
combined_transaction <- bind_rows(data1, data2, data3, data4, data5)

# Viewing the data structure given
col_names <- names(combined_transaction)
col_names
```

Secondly, we will filter the data into Q1,Q2,Q3 and Q4

```{r}
combined_transaction$`Sale Date` <- dmy(combined_transaction$`Sale Date`)

# Check the structure to ensure 'Sale Date' is now a Date object
str(combined_transaction)
```

```{r}
Q1_2024_Private <- combined_transaction %>%
  filter(`Sale Date` >= as.Date("2024-01-01") & 
         `Sale Date` <= as.Date("2024-03-31"))

Q4_2023_Private <- combined_transaction %>%
  filter(`Sale Date` >= as.Date("2023-10-01") & 
         `Sale Date` <= as.Date("2023-12-31"))

datatable(head(Q1_2024_Private, n = 20))
datatable(head(Q4_2023_Private, n = 20))

```

Third we will wrangle the data


## Implementing the visualisation



ggplot(Q1_2024_Private,
       aes(x = 'Unit Price ($ PSF)', 
           y = 'Property Type')) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)

ggplot(Q1_2024_Private,
       aes(x = 'Property Type', 
           y = 'Unit Price ($ PSF)', 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()


