{
  "hash": "e52399b00088f7fbca9c799a2cdca4f4",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 8 Part I - Choropleth Mapping with R\"\nauthor: \"You Ting QUEK\"\ndate: \"7 June, 2024\"\ndate-modified: last-modified\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\nLearning Objectives:\n\n-   plot functional and truthful choropleth maps\n\n# Getting Started\n\n## Installing and loading the required libraries\n\nThe following R packages will be used:\n\n-   Tidyverse:\n\n    -   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,\n\n    -   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,\n\n    -   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and\n\n-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data\n\n-   tmap for plotting choropleth maps\n\nCode chunk below will be used to check if these packages have been installed and also will load them into the working R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse)\n```\n:::\n\n\n## **Importing Data into R**\n\n### **The Data**\n\nTwo data sets will be used to create the choropleth map:\n\n-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format downloaded from [data.gov.sg](https://data.gov.sg/) This geospatial data consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\n\n-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data file downloaded from [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.\n\n### **Importing Geospatial Data into R**\n\nThe code chunk below uses the *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/youting/ytquek/ISSS608-VAA/In_class_ex/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n:::\n\n\n### **Examining the data content**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n:::\n:::\n\n\n### **Importing Attribute Data into R**\n\nUse *read_csv()* function of **readr** package to import *respopagsex2011to2020.csv* file into RStudio and save the file into an R dataframe called *popagsex*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n```\n:::\n\n\n### **Data Preparation**\n\nBefore a thematic map can be prepared, a data table with year 2020 values needs to be prepped. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\n-   YOUNG: age group 0 to 4 until age groyup 20 to 24,\n\n-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,\n\n-   AGED: age group 65 and above,\n\n-   TOTAL: all age group, and\n\n-   DEPENDENCY: the ratio between young and aged against economy active group\n\n#### Data wrangling\n\nThe following data wrangling and transformation functions will be used:\n\n-   *pivot_wider()* of **tidyr** package\n\n-   *mutate()*, *filter()*, *group_by()* and *select()* of **dplyr** package\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup() %>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n```\n:::\n\n\n#### Joining the attribute data and geospatial data\n\nThe values of PA and SZ fields are a mix of upper and lower case. However, the values of SUBZONE_N and PLN_AREA_N are in upper case. Thus, we convert those of PA and SZ to uppercase, before we proceed with the join.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\n*left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\n::: callout-note\n*left_join()* of **dplyr** package is used with `mpsz` simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n:::\n\nSave output into rds file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n```\n:::\n\n\n### **Choropleth Mapping Geospatial Data Using *tmap***\n\nTwo approaches can be used to prepare thematic map using *tmap*:\n\n-   Plotting a thematic map quickly by using *qtm()*.\n\n-   Plotting highly customisable thematic map by using tmap elements.\n\n#### **Plotting a choropleth map quickly by using *qtm()***\n\nThe easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases.\n\nThe code chunk below will draw a cartographic standard choropleth map.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n```\n:::\n\n:::\n\n::: callout-note\n-   *tmap_mode()* with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\n\n-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)\n:::\n\n### **Creating a choropleth map by using *tmap*’s elements**\n\nTo draw a high quality and highly customisable cartographic choropleth map, **tmap**’s drawing elements should be used.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n:::\n\n:::\n\n#### Drawing a base map\n\nThe basic building block of **tmap** is *tm_shape()* followed by one or more layer elemments such as *tm_fill()* and *tm_polygons()*.\n\nIn the code chunk below, *tm_shape()* is used to define the input data (i.e *mpsz_pop2020*) and *tm_polygons()* is used to draw the planning subzone polygons.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n```\n:::\n\n:::\n\n### Drawing a choropleth map using *tm_polygons()*\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, the target variable such as *Dependency* needs to be assigned to *tm_polygons()*.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n```\n:::\n\n:::\n\n::: callout-note\n-   The default interval binning used to draw the choropleth map is called “pretty”.\n\n-   The default colour scheme used is `YlOrRd` of ColorBrewer.\n\n-   By default, Missing value will be shaded in grey.\n:::\n\n#### Drawing a choropleth map using *tm_fill()* and tm_border()\n\n*tm_polygons()* is a wraper of *tm_fill()* and *tm_border()*. *tm_fill()* shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.\n\nThe code chunk below draws a choropleth map by using *tm_fill()* alone. Note that the planning subzones are shared according to the respective dependecy values.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n:::\n\ntm_borders will be used to add the boundary of the planning subzones.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n```\n:::\n\n:::\n\n::: callout-note\nNote that light-gray border lines have been added to the choropleth map.\n\nThe *alpha* argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value is 1.\n\nBesides *alpha* argument, there are three other arguments for *tm_borders()*:\n\n-   *col* = border colour,\n\n-   *lwd* = border line width. The default is 1, and\n\n-   *lty* = border line type. The default is “solid”.\n:::\n\n### **Data classification methods of tmap**\n\nMost choropleth maps employ some methods of data classification to take a large number of observations and group them into data ranges or classes.\n\n**tmap** provides a ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.\n\nTo define a data classification method, the *style* argument of *tm_fill()* or *tm_polygons()* is used.\n\n#### Plotting choropleth maps with built-in classification methods\n\nThe code chunk below shows a quantile data classification with 5 classes.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n```\n:::\n\n:::\n\nIn the code chunk below, the *equal* data classification method is used.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n:::\n\n:::\n\n::: callout-note\nTthe distribution of quantile data classification method are more evenly distributed then equal data classification method\n:::\n\n#### Plotting choropleth map with custome break\n\nFor all built-in styles, category breaks are computed internally. To override these defaults, the breakpoints can be set explicitly using the *breaks* argument to the *tm_fill()*.\n\nNote: **tmap** breaks include a minimum and maximum. Thus, to end up with n categories, n+1 elements must be specified in the *breaks* option (the values must be in increasing order).\n\nCode chunk below will be used to compute and display the descriptive statistics of **DEPENDENCY** field in order to get descriptive statistics on the variable to aid setting break points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n```\n:::\n:::\n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our *breaks* vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\n\nThe choropleth map is plotted with the above values by the code chunk below.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n```\n:::\n\n:::\n\n### **Colour Scheme**\n\n**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.\n\n#### Using ColourBrewer palette\n\nTo change the colour, assign the preferred colour to *palette* argument of *tm_fill()*\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n```\n:::\n\n:::\n\nTo reverse the colour shading, add a “-” prefix.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"-Blues\") +\n  tm_borders(alpha = 0.5)\n```\n:::\n\n:::\n\n### **Map Layouts**\n\nMap layout refers to the combination of all map elements into a cohensive map. Map elements includes: objects to be mapped, title, scale bar, compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n#### Map Legend\n\nIn **tmap**, several *legend* options are provided to change the placement, format and appearance of the legend.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n:::\n\n:::\n\n#### Map style\n\n**tmap** allows a wide variety of layout settings to be changed using *tmap_style()*.\n\nThe code chunk below shows the *classic* style.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n```\n:::\n\n:::\n\n#### Cartographic Furniture\n\nBeside map style, **tmap** also also draws other map furniture e.g., compass, scale bar and grid lines.\n\nIn the code chunk below, *tm_compass()*, *tm_scale_bar()* and *tm_grid()* are used to add compass, scale bar and grid lines onto the choropleth map.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n:::\n\n:::\n\nTo reset the default style\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_style(\"white\")\n```\n:::\n\n\n### **Drawing Small Multiple Choropleth Maps**\n\n**Small multiple maps**, aka **facet maps**, are composed of many maps arranged side-by-side, and/or stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, e.g. time.\n\nIn **tmap**, small multiple maps can be plotted in three ways:\n\n-   by assigning multiple values to at least one of the asthetic arguments\n\n-   by defining a group-by variable in *tm_facets()*\n\n-   by creating multiple stand-alone maps with *tmap_arrange()*.\n\n#### Assigning multiple values to at least one of the aesthetic arguments\n\nSmall multiple choropleth maps are created by defining ***ncols*** in **tm_fill()**\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n```\n:::\n\n:::\n\nsmall multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n```\n:::\n\n:::\n\n#### Defining a group-by variable in *tm_facets()*\n\nmultiple small choropleth maps are created by using **tm_facets()**.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=FALSE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n:::\n\n:::\n\n#### Creating multiple stand-alone maps with *tmap_arrange()*\n\nmultiple small choropleth maps are created by creating multiple stand-alone maps with **tmap_arrange()**.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n```\n:::\n\n:::\n\n### **Mappping Spatial Object Meeting a Selection Criterion**\n\nUse selection funtion to map spatial objects meeting the selection criterion.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_1_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n:::\n\n:::\n",
    "supporting": [
      "Hands-on_Ex08_1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}