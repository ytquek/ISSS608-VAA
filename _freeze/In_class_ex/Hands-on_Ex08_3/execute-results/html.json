{
  "hash": "3006325576096c4fefb855a8f86700ea",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 8 Part III - Analytical Mapping\"\nauthor: \"You Ting QUEK\"\ndate: \"7 June, 2024\"\ndate-modified: last-modified\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\nLearning Objectives:\n\n-   Importing geospatial data in rds format into R environment.\n\n-   Creating cartographic quality choropleth maps by using appropriate tmap functions.\n\n-   Creating rate map\n\n-   Creating percentile map\n\n-   Creating boxmap\n\n# Getting Started\n\n## Installing and loading the required libraries\n\nThe following R packages will be used:\n\n-   Tidyverse:\n\n    -   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,\n\n    -   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,\n\n    -   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and\n\n-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data\n\n-   tmap for plotting choropleth maps\n\nCode chunk below will be used to check if these packages have been installed and also will load them into the working R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse)\n```\n:::\n\n\n### **Importing data**\n\n A data set called *NGA_wp.rds* will be used. The data set is a polygon feature data.frame providing information on water point of Nigeria at the LGA level. You can find the data set in the *rds* sub-direct of the hands-on *data* folder.\n\nThe code chunk below uses *read_rds()* function of **readr** package to import *NGA_wp.rds* into R as a tibble data frame called NGA_wp.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNGA_wp <- read_rds(\"data/rds/NGA_wp.rds\")\n```\n:::\n\n\n## **Basic Choropleth Mapping**\n\n### **Visualising distribution of non-functional water point**\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_3_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs\",\n            legend.outside = FALSE)\n\np2 <- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of total  water point by LGAs\",\n            legend.outside = FALSE)\n\ntmap_arrange(p2, p1, nrow = 1)\n```\n:::\n\n:::\n\n## **Choropleth Map for Rates**\n\nAs water points are not equally distributed in space, map rates are more important than the count. If the location of the water points are not considered, total water point size will be mapped instead of the topic of interest.\n\n### **Deriving Proportion of Functional Water Points and Non-Functional Water Points**\n\nIn the following code chunk, `mutate(`) from **dplyr** package is used to derive two fields, namely *pct_functional* and *pct_nonfunctional*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNGA_wp <- NGA_wp %>%\n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n```\n:::\n\n\n##  **Plotting map of rate**\n\nChoropleth map showing the distribution of percentage functional water point by LGA\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_3_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water point by LGAs\",\n            legend.outside = TRUE)\n```\n:::\n\n:::\n\n## **Extreme Value Maps**\n\nExtreme value maps are variations of common choropleth maps where the classification is designed to highlight extreme values at the lower and upper end of the scale, with the goal of identifying outliers. These maps were developed in the spirit of spatializing EDA, i.e., adding spatial features to commonly used approaches in non-spatial EDA (Anselin 1994).\n\n### **Percentile Map**\n\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note: the begin and endpoint need to be included.\n\n#### Data Preparation\n\nStep 1: Exclude records with NA by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNGA_wp <- NGA_wp %>%\n  drop_na()\n```\n:::\n\n\nStep 2: Creating customised classification and extracting values\n\n\n::: {.cell}\n\n```{.r .cell-code}\npercent <- c(0,.01,.1,.5,.9,.99,1)\nvar <- NGA_wp[\"pct_functional\"] %>%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n```\n:::\n:::\n\n\n::: callout-note\nWhen variables are extracted from an sf data.frame, the geometry is also extracted. For mapping and spatial manipulation, many base R functions cannot deal with the geometry. e.g., `quantile()` gives an error. Thus, `st_set_geomtry(NULL)` is used to drop geomtry field.\n:::\n\n#### Creating the get.var function\n\nFirstly, an R function as is written to extract a variable (i.e. *wp_nonfunctional*) as a vector out of an sf data.frame.\n\n-   arguments:\n\n    -   vname: variable name (as character, in quotes)\n\n    -   df: name of sf data frame\n\n-   returns:\n\n    -   v: vector with values (without a column name)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget.var <- function(vname,df) {\n  v <- df[vname] %>% \n    st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n```\n:::\n\n\n#### A percentile mapping function\n\nNext, a percentile mapping function is written by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent <- c(0,.01,.1,.5,.9,.99,1)\n  var <- get.var(vnam, df)\n  bperc <- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"> 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n```\n:::\n\n\n#### Test drive the percentile mapping function\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_3_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\npercentmap(\"total_wp\", NGA_wp)\n```\n:::\n\n:::\n\n::: callout-note\nAdditional arguments e.g., title, legend positioning can be passed to customise various features of the map.\n:::\n\n### **Box map**\n\nA box map is an augmented quartile map, with an additional lower and upper category. When there are lower outliers, then the starting point for the breaks is the minimum value, and the second break is the lower fence.\n\nWhen there are no lower outliers, then the starting point for the breaks will be the lower fence, and the second break is the minimum value (there will be no observations that fall in the interval between the lower fence and the minimum value).\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_3_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n```\n:::\n\n:::\n\n-   Displaying summary statistics on a choropleth map by using the basic principles of boxplot.\n\n-   To create a box map, a custom breaks specification will be used. However, there is a complication. The break points for the box map vary depending on whether lower or upper outliers are present.\n\n#### Creating the boxbreaks function\n\nThe code chunk below is an R function that creating break points for a box map.\n\n-   arguments:\n\n    -   v: vector with observations\n\n    -   mult: multiplier for IQR (default 1.5)\n\n-   returns:\n\n    -   bb: vector with 7 break points compute quartile and fences\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxbreaks <- function(v,mult=1.5) {\n  qv <- unname(quantile(v))\n  iqr <- qv[4] - qv[2]\n  upfence <- qv[4] + mult * iqr\n  lofence <- qv[2] - mult * iqr\n  # initialize break points vector\n  bb <- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence < qv[1]) {  # no lower outliers\n    bb[1] <- lofence\n    bb[2] <- floor(qv[1])\n  } else {\n    bb[2] <- lofence\n    bb[1] <- qv[1]\n  }\n  if (upfence > qv[5]) { # no upper outliers\n    bb[7] <- upfence\n    bb[6] <- ceiling(qv[5])\n  } else {\n    bb[6] <- upfence\n    bb[7] <- qv[5]\n  }\n  bb[3:5] <- qv[2:4]\n  return(bb)\n}\n```\n:::\n\n\n#### Creating the get.var function\n\nThe code chunk below is an R function to extract a variable as a vector out of an sf data frame.\n\n-   arguments:\n\n    -   vname: variable name (as character, in quotes)\n\n    -   df: name of sf data frame\n\n-   returns:\n\n    -   v: vector with values (without a column name)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget.var <- function(vname,df) {\n  v <- df[vname] %>% st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n```\n:::\n\n\n#### Test drive the newly created function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar <- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n```\n:::\n:::\n\n\n#### Boxmap function\n\nThe code chunk below is an R function to create a box map. Arguments include:\n\n-   vnam: variable name (as character, in quotes)\n\n-   df: simple features polygon layer\n\n-   legtitle: legend title\n\n-   mtitle: map title\n\n-   mult: multiplier for IQR\n\n-   returns: a tmap-element (plots a map)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxmap <- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var <- get.var(vnam,df)\n  bb <- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"< 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"> 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n```\n:::\n\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex08_3_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)\n```\n:::\n\n:::\n",
    "supporting": [
      "Hands-on_Ex08_3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}