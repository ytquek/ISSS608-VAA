[
  {
    "objectID": "take_home_ex/take_home_ex1.html",
    "href": "take_home_ex/take_home_ex1.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "There are two major residential property market in Singapore, namely public and private housing. Public housing aims to meet the basic need of the general public with monthly household income less than or equal to S$14,000. For families with monthly household income more than S$14,000, they need to turn to the private residential market."
  },
  {
    "objectID": "take_home_ex/take_home_ex1.html#data-source",
    "href": "take_home_ex/take_home_ex1.html#data-source",
    "title": "Take Home Exercise 1",
    "section": "Data Source",
    "text": "Data Source\nTo accomplish the task, transaction data of REALIS (2023-2024) will be used."
  },
  {
    "objectID": "take_home_ex/take_home_ex1.html#setting-up-the-environment",
    "href": "take_home_ex/take_home_ex1.html#setting-up-the-environment",
    "title": "Take Home Exercise 1",
    "section": "Setting up the environment",
    "text": "Setting up the environment\n\nInstalling required packages\n\npacman::p_load(tidyverse, ggplot2, dplyr, shiny, bslib)"
  },
  {
    "objectID": "take_home_ex/take_home_ex1.html#preparing-the-data",
    "href": "take_home_ex/take_home_ex1.html#preparing-the-data",
    "title": "Take Home Exercise 1",
    "section": "Preparing the data",
    "text": "Preparing the data\n\nRaw Data Import\nGiven that there are 5 sets of Transaction CSV files, we will need to open each and every single one of them using read_csv function before merging them together again into 1 data frame.\n\nCodeOutput\n\n\n\n# Define the paths to the individual CSV files\nfile1 &lt;- \"data/ResidentialTransaction20240308160536.csv\"\nfile2 &lt;- \"data/ResidentialTransaction20240308160736.csv\"\nfile3 &lt;- \"data/ResidentialTransaction20240308161009.csv\"\nfile4 &lt;- \"data/ResidentialTransaction20240308161109.csv\"\nfile5 &lt;- \"data/ResidentialTransaction20240414220633.csv\"\n\n# Reading the individual CSV files\ndata1 &lt;- read_csv(file1)\ndata2 &lt;- read_csv(file2)\ndata3 &lt;- read_csv(file3)\ndata4 &lt;- read_csv(file4)\ndata5 &lt;- read_csv(file5)\n\n# Combining the data frames into one\ncombined_transaction &lt;- bind_rows(data1, data2, data3, data4, data5)\n\n# Viewing the data structure given\ncol_names &lt;- names(combined_transaction)\ncol_names\n\n\n\n\n\n [1] \"Project Name\"                \"Transacted Price ($)\"       \n [3] \"Area (SQFT)\"                 \"Unit Price ($ PSF)\"         \n [5] \"Sale Date\"                   \"Address\"                    \n [7] \"Type of Sale\"                \"Type of Area\"               \n [9] \"Area (SQM)\"                  \"Unit Price ($ PSM)\"         \n[11] \"Nett Price($)\"               \"Property Type\"              \n[13] \"Number of Units\"             \"Tenure\"                     \n[15] \"Completion Date\"             \"Purchaser Address Indicator\"\n[17] \"Postal Code\"                 \"Postal District\"            \n[19] \"Postal Sector\"               \"Planning Region\"            \n[21] \"Planning Area\"              \n\n\n\n\n\nUsing glimpse to ensure our tibble dataframe is correct\n\nglimpse (combined_transaction)\n\nRows: 26,806\nColumns: 21\n$ `Project Name`                &lt;chr&gt; \"THE REEF AT KING'S DOCK\", \"URBAN TREASU…\n$ `Transacted Price ($)`        &lt;dbl&gt; 2317000, 1823500, 1421112, 1258112, 1280…\n$ `Area (SQFT)`                 &lt;dbl&gt; 882.65, 882.65, 1076.40, 1033.34, 871.88…\n$ `Unit Price ($ PSF)`          &lt;dbl&gt; 2625, 2066, 1320, 1218, 1468, 1767, 1095…\n$ `Sale Date`                   &lt;chr&gt; \"01 Jan 2023\", \"02 Jan 2023\", \"02 Jan 20…\n$ Address                       &lt;chr&gt; \"12 HARBOURFRONT AVENUE #05-32\", \"205 JA…\n$ `Type of Sale`                &lt;chr&gt; \"New Sale\", \"New Sale\", \"New Sale\", \"New…\n$ `Type of Area`                &lt;chr&gt; \"Strata\", \"Strata\", \"Strata\", \"Strata\", …\n$ `Area (SQM)`                  &lt;dbl&gt; 82.0, 82.0, 100.0, 96.0, 81.0, 308.7, 42…\n$ `Unit Price ($ PSM)`          &lt;dbl&gt; 28256, 22238, 14211, 13105, 15802, 19015…\n$ `Nett Price($)`               &lt;chr&gt; \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", …\n$ `Property Type`               &lt;chr&gt; \"Condominium\", \"Condominium\", \"Executive…\n$ `Number of Units`             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ Tenure                        &lt;chr&gt; \"99 yrs from 12/01/2021\", \"Freehold\", \"9…\n$ `Completion Date`             &lt;chr&gt; \"Uncompleted\", \"Uncompleted\", \"Uncomplet…\n$ `Purchaser Address Indicator` &lt;chr&gt; \"HDB\", \"Private\", \"HDB\", \"HDB\", \"HDB\", \"…\n$ `Postal Code`                 &lt;chr&gt; \"097996\", \"419535\", \"269343\", \"269294\", …\n$ `Postal District`             &lt;chr&gt; \"04\", \"14\", \"27\", \"27\", \"28\", \"19\", \"10\"…\n$ `Postal Sector`               &lt;chr&gt; \"09\", \"41\", \"26\", \"26\", \"79\", \"54\", \"27\"…\n$ `Planning Region`             &lt;chr&gt; \"Central Region\", \"East Region\", \"North …\n$ `Planning Area`               &lt;chr&gt; \"Bukit Merah\", \"Bedok\", \"Yishun\", \"Yishu…\n\n\n\n\nDuplicate checks\n\nCodeOutput\n\n\n\nduplicates &lt;- combined_transaction %&gt;% \n  filter(duplicated(.))\nglimpse(duplicates)\n\n\n\n\n\nRows: 0\nColumns: 21\n$ `Project Name`                &lt;chr&gt; \n$ `Transacted Price ($)`        &lt;dbl&gt; \n$ `Area (SQFT)`                 &lt;dbl&gt; \n$ `Unit Price ($ PSF)`          &lt;dbl&gt; \n$ `Sale Date`                   &lt;chr&gt; \n$ Address                       &lt;chr&gt; \n$ `Type of Sale`                &lt;chr&gt; \n$ `Type of Area`                &lt;chr&gt; \n$ `Area (SQM)`                  &lt;dbl&gt; \n$ `Unit Price ($ PSM)`          &lt;dbl&gt; \n$ `Nett Price($)`               &lt;chr&gt; \n$ `Property Type`               &lt;chr&gt; \n$ `Number of Units`             &lt;dbl&gt; \n$ Tenure                        &lt;chr&gt; \n$ `Completion Date`             &lt;chr&gt; \n$ `Purchaser Address Indicator` &lt;chr&gt; \n$ `Postal Code`                 &lt;chr&gt; \n$ `Postal District`             &lt;chr&gt; \n$ `Postal Sector`               &lt;chr&gt; \n$ `Planning Region`             &lt;chr&gt; \n$ `Planning Area`               &lt;chr&gt; \n\n\n\n\n\n\n\n\n\n\n\nData Analysis\n\n\n\nUsing glimpse() as a dipstick to run through our duplicate() checks, we concluded that the data is very sanitised with 0 duplicated transactions.\nHowever we noted that there is an unsuitable data type for the field ‘Sale Date’ which will result in difficulty for us not being able to do filtering later on.\n\n\n\n\nFiltering Q1 2024 data for Private properties\n\nCodeDate Format ChangeFiltering for only Q1 dataSample of Q1 Only Data\n\n\n\ncombined_transaction$`Sale Date` &lt;- dmy(combined_transaction$`Sale Date`)\n\n# Check the structure to ensure 'Sale Date' is now a Date object\nstr(combined_transaction)\n\nQ1_2024_Private &lt;- combined_transaction %&gt;%\n  filter(`Sale Date` &gt;= as.Date(\"2023-01-01\") & \n         `Sale Date` &lt;= as.Date(\"2024-03-31\"))\n\nhead(Q1_2024_Private)\n\n\n\n\ncombined_transaction$`Sale Date` &lt;- dmy(combined_transaction$`Sale Date`)\n\n# Check the structure to ensure 'Sale Date' is now a Date object\nstr(combined_transaction)\n\nspc_tbl_ [26,806 × 21] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Project Name               : chr [1:26806] \"THE REEF AT KING'S DOCK\" \"URBAN TREASURES\" \"NORTH GAIA\" \"NORTH GAIA\" ...\n $ Transacted Price ($)       : num [1:26806] 2317000 1823500 1421112 1258112 1280000 ...\n $ Area (SQFT)                : num [1:26806] 883 883 1076 1033 872 ...\n $ Unit Price ($ PSF)         : num [1:26806] 2625 2066 1320 1218 1468 ...\n $ Sale Date                  : Date[1:26806], format: \"2023-01-01\" \"2023-01-02\" ...\n $ Address                    : chr [1:26806] \"12 HARBOURFRONT AVENUE #05-32\" \"205 JALAN EUNOS #08-02\" \"29 YISHUN CLOSE #08-10\" \"45 YISHUN CLOSE #07-42\" ...\n $ Type of Sale               : chr [1:26806] \"New Sale\" \"New Sale\" \"New Sale\" \"New Sale\" ...\n $ Type of Area               : chr [1:26806] \"Strata\" \"Strata\" \"Strata\" \"Strata\" ...\n $ Area (SQM)                 : num [1:26806] 82 82 100 96 81 ...\n $ Unit Price ($ PSM)         : num [1:26806] 28256 22238 14211 13105 15802 ...\n $ Nett Price($)              : chr [1:26806] \"-\" \"-\" \"-\" \"-\" ...\n $ Property Type              : chr [1:26806] \"Condominium\" \"Condominium\" \"Executive Condominium\" \"Executive Condominium\" ...\n $ Number of Units            : num [1:26806] 1 1 1 1 1 1 1 1 1 1 ...\n $ Tenure                     : chr [1:26806] \"99 yrs from 12/01/2021\" \"Freehold\" \"99 yrs from 15/02/2021\" \"99 yrs from 15/02/2021\" ...\n $ Completion Date            : chr [1:26806] \"Uncompleted\" \"Uncompleted\" \"Uncompleted\" \"Uncompleted\" ...\n $ Purchaser Address Indicator: chr [1:26806] \"HDB\" \"Private\" \"HDB\" \"HDB\" ...\n $ Postal Code                : chr [1:26806] \"097996\" \"419535\" \"269343\" \"269294\" ...\n $ Postal District            : chr [1:26806] \"04\" \"14\" \"27\" \"27\" ...\n $ Postal Sector              : chr [1:26806] \"09\" \"41\" \"26\" \"26\" ...\n $ Planning Region            : chr [1:26806] \"Central Region\" \"East Region\" \"North Region\" \"North Region\" ...\n $ Planning Area              : chr [1:26806] \"Bukit Merah\" \"Bedok\" \"Yishun\" \"Yishun\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   `Project Name` = col_character(),\n  ..   `Transacted Price ($)` = col_number(),\n  ..   `Area (SQFT)` = col_number(),\n  ..   `Unit Price ($ PSF)` = col_number(),\n  ..   `Sale Date` = col_character(),\n  ..   Address = col_character(),\n  ..   `Type of Sale` = col_character(),\n  ..   `Type of Area` = col_character(),\n  ..   `Area (SQM)` = col_number(),\n  ..   `Unit Price ($ PSM)` = col_number(),\n  ..   `Nett Price($)` = col_character(),\n  ..   `Property Type` = col_character(),\n  ..   `Number of Units` = col_double(),\n  ..   Tenure = col_character(),\n  ..   `Completion Date` = col_character(),\n  ..   `Purchaser Address Indicator` = col_character(),\n  ..   `Postal Code` = col_character(),\n  ..   `Postal District` = col_character(),\n  ..   `Postal Sector` = col_character(),\n  ..   `Planning Region` = col_character(),\n  ..   `Planning Area` = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\n\n\n\nQ1_2024_Private &lt;- combined_transaction %&gt;%\n  filter(`Sale Date` &gt;= as.Date(\"2023-01-01\") & \n         `Sale Date` &lt;= as.Date(\"2024-03-31\"))\n\n\n\n\nhead(Q1_2024_Private)\n\n# A tibble: 6 × 21\n  `Project Name`       `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n  &lt;chr&gt;                                 &lt;dbl&gt;         &lt;dbl&gt;                &lt;dbl&gt;\n1 THE REEF AT KING'S …                2317000          883.                 2625\n2 URBAN TREASURES                     1823500          883.                 2066\n3 NORTH GAIA                          1421112         1076.                 1320\n4 NORTH GAIA                          1258112         1033.                 1218\n5 PARC BOTANNIA                       1280000          872.                 1468\n6 NANYANG PARK                        5870000         3323.                 1767\n# ℹ 17 more variables: `Sale Date` &lt;date&gt;, Address &lt;chr&gt;, `Type of Sale` &lt;chr&gt;,\n#   `Type of Area` &lt;chr&gt;, `Area (SQM)` &lt;dbl&gt;, `Unit Price ($ PSM)` &lt;dbl&gt;,\n#   `Nett Price($)` &lt;chr&gt;, `Property Type` &lt;chr&gt;, `Number of Units` &lt;dbl&gt;,\n#   Tenure &lt;chr&gt;, `Completion Date` &lt;chr&gt;, `Purchaser Address Indicator` &lt;chr&gt;,\n#   `Postal Code` &lt;chr&gt;, `Postal District` &lt;chr&gt;, `Postal Sector` &lt;chr&gt;,\n#   `Planning Region` &lt;chr&gt;, `Planning Area` &lt;chr&gt;"
  },
  {
    "objectID": "take_home_ex/take_home_ex1.html#transaction-type-distribution-across-planning-regions-on-different-private-residential-types-in-1st-quarter-2024",
    "href": "take_home_ex/take_home_ex1.html#transaction-type-distribution-across-planning-regions-on-different-private-residential-types-in-1st-quarter-2024",
    "title": "Take Home Exercise 1",
    "section": "Transaction Type Distribution across Planning Regions on Different Private Residential Types in 1st Quarter 2024",
    "text": "Transaction Type Distribution across Planning Regions on Different Private Residential Types in 1st Quarter 2024\nFrom our initial peek into the available data attributes, there are a few key attributes which we believe is useful in revealing interesting observable trends such as Planning Region, PSF price and Property types.\nTo test this hypothesis, we will use a FacetGrid to show the significance each metric has on the total transactions.\n\nCode for FacetGridPlot for FacetGridDrilldown\n\n\n\nggplot(data=Q1_2024_Private, \n       aes(x = `Unit Price ($ PSF)`, \n           fill = `Type of Sale`)) +\n  geom_histogram(position = \"dodge\", binwidth = 100) +  # Adjust binwidth as needed\n  facet_grid(`Planning Region` ~ `Property Type`) +\n  labs(x = \"PSF Price\", y = \"Count\", title = \"Distribution of PSF Prices by Property Type, Region, and Transaction Type\") +\n  scale_fill_brewer(palette = \"Set1\") +  # Use a color palette that is distinct\n  theme_minimal() +\n  theme(legend.position = \"bottom\")  # Adjust legend position as needed\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=Q1_2024_Private, \n       aes(x = `Planning Region`, \n           fill = `Property Type`)) +\n  geom_bar(color = \"grey30\") +\n  labs(x = \"Region\", y = \"Transactions\", title = \"Sale of different property types in different Regions\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservation from the Drilldown chart\n\n\n\nFrom the FacetGrid transaction volumes of Property Types segregated by the different regions, we observed that majority of the transactions happening in 2024 involves either Apartments or Condominiums in the Central Region.\nShifting gears into the types of sale, we can also observe that New Sale is very popular for Apartments in Central Region as well as Executive Condominiums in the West Region. This sentiment is also backed by Straits Times\nGiven that the graph has highlighted Region and Apartment Type has a high correlation in contributing to buyer’s interest, we have use a histogram to illustrate it in the drilldown chart."
  },
  {
    "objectID": "take_home_ex/take_home_ex1.html#average-transaction-price-by-region",
    "href": "take_home_ex/take_home_ex1.html#average-transaction-price-by-region",
    "title": "Take Home Exercise 1",
    "section": "Average Transaction Price by Region",
    "text": "Average Transaction Price by Region\nTo visualise the variation in average property prices across different regions in Singapore, we will use a choropleth map and shade each region according to its average property price which makes pricing differences immediately obvious.\nTo create the map, we will need the sub-zone boundary of URA Master Plan 2019 dataset as well as our own Q1_2024_Private dataset which we created earlier on.\nThe tools required are :\n\npacman::p_load(tmap,sf, httr, dplyr, future, furrr)\n\n\n\n\n\n\n\n\nComponents\nDescription\n\n\n\n\ntmap\nThe syntax for creating plots is similar to that of ggplot2, but tailored to maps\n\n\nsf\nSupport for simple features, a standardized way to encode spatial vector data\n\n\nhttr2\nCreate and submit HTTP requests and work with the HTTP responses\n\n\nfuture\nFor sequential and parallel processing of R expression. This will be useful for expediting processing time later on.\n\n\n\n\nStep 1\nThe first step is to utilise Singapore’s OneMap service to map each postal code to their corresponding Longtidue and Latitude.\n\nCreate a new cache layer to store found postal codeCreate Base API call with a catch clauseStore found data in ‘result’ dataframe\n\n\n\ncache &lt;- new.env()\nplan(multisession)\n\n\n\n\nfetch_geocode_data &lt;- function(postcode)\n  # Check cache first\n  if (exists(postcode, envir = cache)) {\n    return(get(postcode, envir = cache))\n  }\n  \n  # API parameters\n  url &lt;- \"https://www.onemap.gov.sg/api/common/elastic/search\"\n  query_params &lt;- list(searchVal = postcode, returnGeom = 'Y', getAddrDetails = 'Y', pageNum = '1')\n\n  # API call with error handling\n  response &lt;- tryCatch({\n    GET(url, query = query_params)\n  }, error = function(e) {\n    message(\"Error fetching data for postcode \", postcode, \": \", e$message)\n    return(NULL)\n  })\n\n  # Check if the API call was successful\n  if (is.null(response) || http_error(response)) {\n    return(data.frame(postcode = postcode, lat = NA, lon = NA))\n  }\n\n  # Parse response\n  content_data &lt;- content(response, type = \"application/json\")\n\n  # Store in cache and return results\n  if (content_data$found &gt; 0) {\n    lat &lt;- content_data$results[[1]]$LATITUDE\n    lon &lt;- content_data$results[[1]]$LONGITUDE\n    result &lt;- data.frame(postcode = postcode, lat = lat, lon = lon)\n  } else {\n    result &lt;- data.frame(postcode = postcode, lat = NA, lon = NA)\n  }\n\n\n\n\n  assign(postcode, result, envir = cache)\n  return(result)\n\n##Output\n\ncache &lt;- new.env()\nplan(multisession)\n\nfetch_geocode_data &lt;- function(postcode) {\n  # Check cache first\n  if (exists(postcode, envir = cache)) {\n    return(get(postcode, envir = cache))\n  }\n  \n  # API parameters\n  url &lt;- \"https://www.onemap.gov.sg/api/common/elastic/search\"\n  query_params &lt;- list(searchVal = postcode, returnGeom = 'Y', getAddrDetails = 'Y', pageNum = '1')\n\n  # API call with error handling\n  response &lt;- tryCatch({\n    GET(url, query = query_params)\n  }, error = function(e) {\n    message(\"Error fetching data for postcode \", postcode, \": \", e$message)\n    return(NULL)\n  })\n\n  # Check if the API call was successful\n  if (is.null(response) || http_error(response)) {\n    return(data.frame(postcode = postcode, lat = NA, lon = NA))\n  }\n\n  # Parse response\n  content_data &lt;- content(response, type = \"application/json\")\n\n  # Store in cache and return results\n  if (content_data$found &gt; 0) {\n    lat &lt;- content_data$results[[1]]$LATITUDE\n    lon &lt;- content_data$results[[1]]$LONGITUDE\n    result &lt;- data.frame(postcode = postcode, lat = lat, lon = lon)\n  } else {\n    result &lt;- data.frame(postcode = postcode, lat = NA, lon = NA)\n  }\n\n  assign(postcode, result, envir = cache)\n  return(result)\n}\n\n\n\n\n\n\nStep 2\nWe will now match Transaction (Q1_2024_Private) Tibble Dataframe’s unique postal code to our list of postal code extracted from OneMap.\n\n# Search 'Q1_2024_Private' dataframe for 'Postal Code' column\ndata_pc &lt;- unique(Q1_2024_Private$`Postal Code`)\n\n# Use futures for asynchronous processing\nresults &lt;- future_map(data_pc, fetch_geocode_data)\ncombined_results &lt;- bind_rows(results)\n\n# Combine results and filter out unsuccessful ones\nsuccessful_results &lt;- combined_results %&gt;%\n  filter(!is.na(lat) & !is.na(lon))\n\n# Write results to a CSV file\nwrite.csv(successful_results, file = \"data/PostalCodeList.csv\", row.names = FALSE)\n\n\nQ1_2024_Private_with_Coordinates &lt;- Q1_2024_Private %&gt;%\n  left_join(successful_results, by = c(\"Postal Code\" = \"postcode\"))\n\n\n\nStep 3 Importing Geospatial Data\nLoad Map into MPSZ\n\n# Instantiate the map from MPSZ 2019\nmpsz &lt;- st_read(dsn = \"data/\",\n                layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `/Users/youting/ytquek/ISSS608-VAA/take_home_ex/data' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n# Remove rows where latitude or longitude is NA\nQ1_2024_Private_with_Coordinates &lt;- Q1_2024_Private_with_Coordinates %&gt;%\n  filter(!is.na(lat) & !is.na(lon))\n\nq1_2024_sf &lt;- st_as_sf(Q1_2024_Private_with_Coordinates ,\n                       coords = c(\"lon\", \"lat\"),\n                       crs =4326) %&gt;%\n  st_transform(crs = 3414)\n\n\n\nStep 4 - Extracting study data (Average Transacted Price)\nWe will filter out the column data - Transacted Price, PSF & Planning Area which is required for a drill-down analysis on consumer pattern.\n\nq1_avg_txn &lt;- Q1_2024_Private_with_Coordinates %&gt;%\n    group_by(`Planning Area`) %&gt;%\n    summarise(Avg_Transacted_Price = mean(`Transacted Price ($)`, na.rm = TRUE))\nq1_avg_txn &lt;- q1_avg_txn %&gt;%\n    mutate(`Planning Area` = toupper(`Planning Area`))\nq1_avg_txn &lt;- st_drop_geometry(q1_avg_txn)\n\n\nq1_avg_psf &lt;- Q1_2024_Private_with_Coordinates %&gt;%\n    group_by(`Planning Area`) %&gt;%\n    summarise(Avg_Transacted_Price = mean(`Unit Price ($ PSF)`, na.rm = TRUE))\nq1_avg_psf &lt;- q1_avg_psf %&gt;%\n    mutate(`Planning Area` = toupper(`Planning Area`))\nq1_avg_psf &lt;- st_drop_geometry(q1_avg_psf)\n\n\n\nStep 5 - Geospatial Data Wrangling\n\nAverage Transacted Price ( Planning Region )Average PSF ( Planning Region )\n\n\n\nmpsz_avg_txn_px &lt;- mpsz %&gt;%\n    left_join(\n        q1_avg_txn,\n        by = c(\"PLN_AREA_N\" = \"Planning Area\")\n    ) %&gt;% drop_na()\n\ntmap_mode(\"view\")\n\nmap2 &lt;- tm_shape(mpsz_avg_txn_px) +\n    tm_polygons(col = \"Avg_Transacted_Price\", \n                palette = \"YlOrRd\", \n                alpha = 0.3,\n                style = \"quantile\",\n                n = 7) +\n    tmap_options(check.and.fix = TRUE) +\n  tm_view(set.zoom.limits = c(11,14))\n\nmap2\n\n\n\n\n\n\n\n\n\nmpsz_avg_psf &lt;- mpsz %&gt;%\n    left_join(\n        q1_avg_psf,\n        by = c(\"PLN_AREA_N\" = \"Planning Area\")\n    ) %&gt;% drop_na()\n\ntmap_mode(\"view\")\n\nmap3 &lt;- tm_shape(mpsz_avg_psf) +\n    tm_polygons(col = \"Avg_Transacted_Price\", \n                palette = \"YlOrRd\", \n                alpha = 0.3,\n                style = \"quantile\",\n                n = 7) +\n    tmap_options(check.and.fix = TRUE) +\n  tm_view(set.zoom.limits = c(11,14))\n\nmap3"
  },
  {
    "objectID": "In_class_ex/hands_on_ex1.html",
    "href": "In_class_ex/hands_on_ex1.html",
    "title": "Hands_on_ex1",
    "section": "",
    "text": "##Step 1: Installing the required libraries\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "In_class_ex/hands_on_ex1.html#visualising-data-in-histogram",
    "href": "In_class_ex/hands_on_ex1.html#visualising-data-in-histogram",
    "title": "Hands_on_ex1",
    "section": "Visualising data in Histogram",
    "text": "Visualising data in Histogram\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "In_class_ex/hands_on_ex1.html#visualising-data-in-dotplot",
    "href": "In_class_ex/hands_on_ex1.html#visualising-data-in-dotplot",
    "title": "Hands_on_ex1",
    "section": "Visualising data in Dotplot",
    "text": "Visualising data in Dotplot\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)"
  },
  {
    "objectID": "In_class_ex/hands_on_ex1.html#visualising-data-in-histogram-in-bins",
    "href": "In_class_ex/hands_on_ex1.html#visualising-data-in-histogram-in-bins",
    "title": "Hands_on_ex1",
    "section": "Visualising data in Histogram in bins",
    "text": "Visualising data in Histogram in bins\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\nAdding colors\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")"
  },
  {
    "objectID": "In_class_ex/hands_on_ex1.html#visualising-data-with-data-plotlines---geomdensity",
    "href": "In_class_ex/hands_on_ex1.html#visualising-data-with-data-plotlines---geomdensity",
    "title": "Hands_on_ex1",
    "section": "Visualising data with data plotlines - geomdensity()",
    "text": "Visualising data with data plotlines - geomdensity()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()"
  },
  {
    "objectID": "In_class_ex/hands_on_ex1.html#visualising-data-with-boxplot-diagrams",
    "href": "In_class_ex/hands_on_ex1.html#visualising-data-with-boxplot-diagrams",
    "title": "Hands_on_ex1",
    "section": "Visualising data with Boxplot diagrams",
    "text": "Visualising data with Boxplot diagrams\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)"
  },
  {
    "objectID": "In_class_ex/hands_on_ex1.html#visualising-data-with-violin-plot---geomviolin",
    "href": "In_class_ex/hands_on_ex1.html#visualising-data-with-violin-plot---geomviolin",
    "title": "Hands_on_ex1",
    "section": "Visualising data with violin plot - geomviolin()",
    "text": "Visualising data with violin plot - geomviolin()\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()"
  },
  {
    "objectID": "In_class_ex/hands_on_ex1.html#visualising-data-in-scatterplot",
    "href": "In_class_ex/hands_on_ex1.html#visualising-data-in-scatterplot",
    "title": "Hands_on_ex1",
    "section": "Visualising data in scatterplot",
    "text": "Visualising data in scatterplot\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "In_class_ex/hands_on_ex1.html#combining-boxplot-with-scatter-plot",
    "href": "In_class_ex/hands_on_ex1.html#combining-boxplot-with-scatter-plot",
    "title": "Hands_on_ex1",
    "section": "Combining boxplot with scatter plot",
    "text": "Combining boxplot with scatter plot\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "In_class_ex/hands_on_ex1.html#working-with-essential-grammatical-elements-in-ggplot2-stat",
    "href": "In_class_ex/hands_on_ex1.html#working-with-essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands_on_ex1",
    "section": "Working with Essential Grammatical Elements in ggplot2: stat",
    "text": "Working with Essential Grammatical Elements in ggplot2: stat\n\nWorking with stat summary\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\nOverriding soothing methods\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)"
  },
  {
    "objectID": "In_class_ex/hands_on_ex1.html#working-with-essential-grammatical-elements-in-ggplot2-facet",
    "href": "In_class_ex/hands_on_ex1.html#working-with-essential-grammatical-elements-in-ggplot2-facet",
    "title": "Hands_on_ex1",
    "section": "Working with Essential Grammatical Elements in ggplot2: Facet",
    "text": "Working with Essential Grammatical Elements in ggplot2: Facet\n\nUsing Facetwraps\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\nUsing Facet Grid\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "In_class_ex/In-class_Ex01.html",
    "href": "In_class_ex/In-class_Ex01.html",
    "title": "In-class_ex1",
    "section": "",
    "text": "In the code chunk below, [p_load()] of pacman pkg is used to load tidyverse family of packages.\n\npacman::p_load(tidyverse)\n\n\nrealis &lt;- read_csv(\"data/realis2019.csv\")\n\n\nggplot(data = realis, aes(x = `Unit Price ($ psm)`)) + geom_histogram()"
  },
  {
    "objectID": "In_class_ex/In-class_Ex01.html#loading-r-packages",
    "href": "In_class_ex/In-class_Ex01.html#loading-r-packages",
    "title": "In-class_ex1",
    "section": "",
    "text": "In the code chunk below, [p_load()] of pacman pkg is used to load tidyverse family of packages.\n\npacman::p_load(tidyverse)\n\n\nrealis &lt;- read_csv(\"data/realis2019.csv\")\n\n\nggplot(data = realis, aes(x = `Unit Price ($ psm)`)) + geom_histogram()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "This is a YT’s Quadro website for Year 2024 TSKAM’s Visual Analytics Course.\nBelow is me 2024 January\n\n& Now this is me after Aug 2024:"
  },
  {
    "objectID": "In_class_ex/In-class_Ex02.html",
    "href": "In_class_ex/In-class_Ex02.html",
    "title": "In-class_Ex02 Demo",
    "section": "",
    "text": "pacman::p_load(tidyverse, ggplot2, ggdist, ggthemes, colorspace, ggridges)\n\n\n\n\n\nexam_df &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In_class_ex/In-class_Ex02.html#setting-up-the-environment",
    "href": "In_class_ex/In-class_Ex02.html#setting-up-the-environment",
    "title": "In-class_Ex02 Demo",
    "section": "",
    "text": "pacman::p_load(tidyverse, ggplot2, ggdist, ggthemes, colorspace, ggridges)\n\n\n\n\n\nexam_df &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In_class_ex/In-class_Ex02.html#visualising-distribution",
    "href": "In_class_ex/In-class_Ex02.html#visualising-distribution",
    "title": "In-class_Ex02 Demo",
    "section": "Visualising Distribution",
    "text": "Visualising Distribution\n\nmedian_eng &lt;- median(exam_df$ENGLISH)\nmean_eng &lt;- mean(exam_df$ENGLISH)\nstd_eng &lt;- sd(exam_df$ENGLISH)\n\nggplot(exam_df,\n       aes(x = ENGLISH)) +\n  geom_density(\n    color = \"#1696d2\",\n    adjust = .65,\n    alpha = .6\n  )+\n  stat_function(\n    fun = dnorm,\n    args = list(mean = mean_eng,\n                sd = std_eng),\n    col = \"grey30\",\n    size = .8) +\n  geom_vline(\n    aes(xintercept = mean_eng),\n    \n  )"
  },
  {
    "objectID": "In_class_ex/In-class_Ex02.html#probability-density-plot",
    "href": "In_class_ex/In-class_Ex02.html#probability-density-plot",
    "title": "In-class_Ex02 Demo",
    "section": "Probability Density Plot",
    "text": "Probability Density Plot\nAppropriate method for representing continuous values"
  },
  {
    "objectID": "In_class_ex/In-class_Ex02.html#density-plot-with-summary-statistics",
    "href": "In_class_ex/In-class_Ex02.html#density-plot-with-summary-statistics",
    "title": "In-class_Ex02 Demo",
    "section": "Density Plot with Summary Statistics",
    "text": "Density Plot with Summary Statistics\nThe code chunk below includes a probability density plot (violet) and normal distribution plot (gray). The mean (green) and median (blue) of the data is also plotted.\n\nmedian_eng &lt;- median(exam_df$ENGLISH)\nmean_eng &lt;- mean(exam_df$ENGLISH)\nstd_eng &lt;- sd(exam_df$ENGLISH)\n\n\n# Probability Density Plot\nggplot(data=exam_df, aes(x = ENGLISH)) +\n  geom_density(color=\"violet\", \n               adjust = .65,\n               alpha = .1) +\n  stat_function( # Normal Distribution Plot\n    fun = dnorm,\n    args = list(mean = mean_eng, sd = std_eng),\n    col = \"gray\",\n    linewidth = .8) +\n  geom_vline( # Mean line\n    aes(xintercept = mean_eng),\n    colour = \"darkgreen\",\n    linewidth = .6,\n    linetype = \"dashed\") +\n  annotate(geom = \"text\",\n           x = mean_eng -8,\n           y = .04,\n           label = paste0(\"Mean: \",\n                          round((mean_eng),2)),\n           colour=\"darkgreen\") +\n  geom_vline( # Median Line\n    aes(xintercept = median_eng),\n    colour = \"navy\",\n    linewidth = .6,\n    linetype = \"dashed\") +\n  annotate(geom = \"text\",\n           x = median_eng +8,\n           y = .04,\n           label = paste0(\"Median: \",\n                          round((mean_eng),2)),\n           colour=\"navy\") +\n  ggtitle(\"Density Plot with Summary Statistics of English Scores\")"
  },
  {
    "objectID": "In_class_ex/In-class_Ex02.html#ridgeline-plot",
    "href": "In_class_ex/In-class_Ex02.html#ridgeline-plot",
    "title": "In-class_Ex02 Demo",
    "section": "Ridgeline Plot",
    "text": "Ridgeline Plot\nRidgeline plot (i.e. Joyplot) reveals the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale with slightoverlaps"
  },
  {
    "objectID": "In_class_ex/In-class_Ex02.html#varying-fill-colours-along-the-x-axis",
    "href": "In_class_ex/In-class_Ex02.html#varying-fill-colours-along-the-x-axis",
    "title": "In-class_Ex02 Demo",
    "section": "Varying Fill Colours along the X-axis",
    "text": "Varying Fill Colours along the X-axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis.\n\nggplot(exam_df, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = after_stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [°C]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English Grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "In_class_ex/In-class_Ex02.html#mapping-probabilities-directly-onto-colour",
    "href": "In_class_ex/In-class_Ex02.html#mapping-probabilities-directly-onto-colour",
    "title": "In-class_Ex02 Demo",
    "section": "Mapping Probabilities directly onto colour",
    "text": "Mapping Probabilities directly onto colour\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score."
  },
  {
    "objectID": "In_class_ex/In-class_Ex02.html#ridgeline-plots-with-quantile-lines",
    "href": "In_class_ex/In-class_Ex02.html#ridgeline-plots-with-quantile-lines",
    "title": "In-class_Ex02 Demo",
    "section": "Ridgeline Plots with Quantile Lines",
    "text": "Ridgeline Plots with Quantile Lines\nRidgeline plots can be coloured by quantile using geom_density_ridges_gradient(), via the calculated stat(quantile) \n\n\n\n\n\nQuantiles can also be specified by cut points e.g. 2.5% and 97.5% tails to colour the ridgeline plot."
  },
  {
    "objectID": "In_class_ex/In-class_Ex02.html#plotting-a-half-eye-graph",
    "href": "In_class_ex/In-class_Ex02.html#plotting-a-half-eye-graph",
    "title": "In-class_Ex02 Demo",
    "section": "Plotting a Half Eye graph",
    "text": "Plotting a Half Eye graph\nPlot a Half-Eye graph by using stat_halfeye() of ggdist package, producing a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nRemove the slab interval by setting .width = 0 and point_colour = NA."
  },
  {
    "objectID": "In_class_ex/In-class_Ex02.html#adding-the-boxplot",
    "href": "In_class_ex/In-class_Ex02.html#adding-the-boxplot",
    "title": "In-class_Ex02 Demo",
    "section": "Adding the boxplot",
    "text": "Adding the boxplot\nThe second geometry layer i.e. a narrow boxplot is produced using geom_boxplot() of ggplot2 This produces a narrow boxplot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "In_class_ex/In-class_Ex02.html#adding-the-dot-plots",
    "href": "In_class_ex/In-class_Ex02.html#adding-the-dot-plots",
    "title": "In-class_Ex02 Demo",
    "section": "Adding the Dot Plots",
    "text": "Adding the Dot Plots\nThe third geometry layer is added using stat_dots() of ggdist package. This produces a half-dotplot, similar to a histogram that indicates the number of samples (number of dots) in each bin. Use side = “left” to specify the dot plots on the left-hand side.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "In_class_ex/In-class_Ex02.html#finishing-touch",
    "href": "In_class_ex/In-class_Ex02.html#finishing-touch",
    "title": "In-class_Ex02 Demo",
    "section": "Finishing touch",
    "text": "Finishing touch\n coord_flip() of ggplot2 package is used to flip the raincloud chart horizontally to give it the raincloud appearance. theme_economist() of ggthemes package is also used to give the raincloud chart a professional publishing standard look.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam_df, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html",
    "href": "In_class_ex/hands-on_ex3.html",
    "title": "Hands On Exercise 3",
    "section": "",
    "text": "Create interactive data visualisation by using functions provided by ggiraph and plotlyr packages"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#installing-the-required-libraries",
    "href": "In_class_ex/hands-on_ex3.html#installing-the-required-libraries",
    "title": "Hands On Exercise 3",
    "section": "Installing the required libraries",
    "text": "Installing the required libraries\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#importing-the-data",
    "href": "In_class_ex/hands-on_ex3.html#importing-the-data",
    "title": "Hands On Exercise 3",
    "section": "Importing the Data",
    "text": "Importing the Data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nTo create an interactive version of ggplot2 geom (i.e. [geom_dotplot_interactive()] we first need to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#displaying-multiple-information-on-tooltip",
    "href": "In_class_ex/hands-on_ex3.html#displaying-multiple-information-on-tooltip",
    "title": "Hands On Exercise 3",
    "section": "Displaying multiple information on tooltip",
    "text": "Displaying multiple information on tooltip\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7. By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#customising-tooltop-style",
    "href": "In_class_ex/hands-on_ex3.html#customising-tooltop-style",
    "title": "Hands On Exercise 3",
    "section": "Customising Tooltop style",
    "text": "Customising Tooltop style\nCode chunk below uses [opts_tooltip()] of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#displaying-statistics-on-tooltip",
    "href": "In_class_ex/hands-on_ex3.html#displaying-statistics-on-tooltip",
    "title": "Hands On Exercise 3",
    "section": "Displaying statistics on tooltip",
    "text": "Displaying statistics on tooltip\nTHis is an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#hover-effect-with-data-id.-aesthetic",
    "href": "In_class_ex/hands-on_ex3.html#hover-effect-with-data-id.-aesthetic",
    "title": "Hands On Exercise 3",
    "section": "Hover effect with data id. aesthetic",
    "text": "Hover effect with data id. aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#styling-hover-effect",
    "href": "In_class_ex/hands-on_ex3.html#styling-hover-effect",
    "title": "Hands On Exercise 3",
    "section": "Styling hover effect",
    "text": "Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over."
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#plot-1-combining-tooltip-and-hover-effect",
    "href": "In_class_ex/hands-on_ex3.html#plot-1-combining-tooltip-and-hover-effect",
    "title": "Hands On Exercise 3",
    "section": "Plot 1: Combining tooltip and hover effect",
    "text": "Plot 1: Combining tooltip and hover effect\nThe tooltip and hover effects are combined in the interactive statistical graph in the code chunk below.\nElements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#click-effect-with-onclick",
    "href": "In_class_ex/hands-on_ex3.html#click-effect-with-onclick",
    "title": "Hands On Exercise 3",
    "section": "Click effect with onclick",
    "text": "Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web. Web document link with a data object will be displayed on the web browser upon mouse click.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nClick actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#coordinated-multiple-views-with-ggiraph",
    "href": "In_class_ex/hands-on_ex3.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands On Exercise 3",
    "section": "Coordinated Multiple Views with ggiraph",
    "text": "Coordinated Multiple Views with ggiraph\nWhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#there-are-two-ways-to-create-interactive-graph-by-using-plotly-they-are",
    "href": "In_class_ex/hands-on_ex3.html#there-are-two-ways-to-create-interactive-graph-by-using-plotly-they-are",
    "title": "Hands On Exercise 3",
    "section": "There are two ways to create interactive graph by using plotly, they are:",
    "text": "There are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "In_class_ex/hands-on_ex3.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands On Exercise 3",
    "section": "Creating an interactive scatter plot: plot_ly() method",
    "text": "Creating an interactive scatter plot: plot_ly() method\nA basic interactive plot created by using plot_ly().\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#working-with-visual-variable-plot_ly-method",
    "href": "In_class_ex/hands-on_ex3.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands On Exercise 3",
    "section": "Working with visual variable: plot_ly() method",
    "text": "Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "In_class_ex/hands-on_ex3.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands On Exercise 3",
    "section": "Creating an interactive scatter plot: ggplotly() method",
    "text": "Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly()."
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#plot",
    "href": "In_class_ex/hands-on_ex3.html#plot",
    "title": "Hands On Exercise 3",
    "section": "Plot",
    "text": "Plot\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe only extra line you need to include in the code chunk is ggplotly()."
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#interactive-data-visualisation---crosstalk-methods",
    "href": "In_class_ex/hands-on_ex3.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands On Exercise 3",
    "section": "Interactive Data Visualisation - crosstalk methods",
    "text": "Interactive Data Visualisation - crosstalk methods\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#linked-brushing-crosstalk-method",
    "href": "In_class_ex/hands-on_ex3.html#linked-brushing-crosstalk-method",
    "title": "Hands On Exercise 3",
    "section": "Linked brushing: crosstalk method",
    "text": "Linked brushing: crosstalk method\nCode chunk below is used to implement coordinated brushing."
  },
  {
    "objectID": "In_class_ex/hands-on_ex3.html#plot-1",
    "href": "In_class_ex/hands-on_ex3.html#plot-1",
    "title": "Hands On Exercise 3",
    "section": "Plot",
    "text": "Plot\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)"
  },
  {
    "objectID": "take_home_ex/take_home_ex1.html#additional-bonus-average-transaction-price-by-region",
    "href": "take_home_ex/take_home_ex1.html#additional-bonus-average-transaction-price-by-region",
    "title": "Take Home Exercise 1",
    "section": "[Additional Bonus] Average Transaction Price by Region",
    "text": "[Additional Bonus] Average Transaction Price by Region\nTo visualise the variation in average property prices across different regions in Singapore, we will use a choropleth map and shade each region according to its average property price which makes pricing differences immediately obvious.\nTo create the map, we will need the sub-zone boundary of URA Master Plan 2019 dataset as well as our own Q1_2024_Private dataset which we created earlier on.\nThe tools required are :\n\npacman::p_load(tmap,sf, httr, dplyr, future, furrr)\n\n\n\n\n\n\n\n\nComponents\nDescription\n\n\n\n\ntmap\nThe syntax for creating plots is similar to that of ggplot2, but tailored to maps\n\n\nsf\nSupport for simple features, a standardized way to encode spatial vector data\n\n\nhttr2\nCreate and submit HTTP requests and work with the HTTP responses\n\n\nfuture\nFor sequential and parallel processing of R expression. This will be useful for expediting processing time later on.\n\n\n\n\nStep 1\nThe first step is to utilise Singapore’s OneMap service to map each postal code to their corresponding Longtidue and Latitude.\n\nCreate a new cache layer to store found postal codeCreate Base API call with a catch clauseStore found data in ‘result’ dataframe\n\n\n\ncache &lt;- new.env()\nplan(multisession)\n\n\n\n\nfetch_geocode_data &lt;- function(postcode)\n  # Check cache first\n  if (exists(postcode, envir = cache)) {\n    return(get(postcode, envir = cache))\n  }\n  \n  # API parameters\n  url &lt;- \"https://www.onemap.gov.sg/api/common/elastic/search\"\n  query_params &lt;- list(searchVal = postcode, returnGeom = 'Y', getAddrDetails = 'Y', pageNum = '1')\n\n  # API call with error handling\n  response &lt;- tryCatch({\n    GET(url, query = query_params)\n  }, error = function(e) {\n    message(\"Error fetching data for postcode \", postcode, \": \", e$message)\n    return(NULL)\n  })\n\n  # Check if the API call was successful\n  if (is.null(response) || http_error(response)) {\n    return(data.frame(postcode = postcode, lat = NA, lon = NA))\n  }\n\n  # Parse response\n  content_data &lt;- content(response, type = \"application/json\")\n\n  # Store in cache and return results\n  if (content_data$found &gt; 0) {\n    lat &lt;- content_data$results[[1]]$LATITUDE\n    lon &lt;- content_data$results[[1]]$LONGITUDE\n    result &lt;- data.frame(postcode = postcode, lat = lat, lon = lon)\n  } else {\n    result &lt;- data.frame(postcode = postcode, lat = NA, lon = NA)\n  }\n\n\n\n\n  assign(postcode, result, envir = cache)\n  return(result)\n\n##Output\n\ncache &lt;- new.env()\nplan(multisession)\n\nfetch_geocode_data &lt;- function(postcode) {\n  # Check cache first\n  if (exists(postcode, envir = cache)) {\n    return(get(postcode, envir = cache))\n  }\n  \n  # API parameters\n  url &lt;- \"https://www.onemap.gov.sg/api/common/elastic/search\"\n  query_params &lt;- list(searchVal = postcode, returnGeom = 'Y', getAddrDetails = 'Y', pageNum = '1')\n\n  # API call with error handling\n  response &lt;- tryCatch({\n    GET(url, query = query_params)\n  }, error = function(e) {\n    message(\"Error fetching data for postcode \", postcode, \": \", e$message)\n    return(NULL)\n  })\n\n  # Check if the API call was successful\n  if (is.null(response) || http_error(response)) {\n    return(data.frame(postcode = postcode, lat = NA, lon = NA))\n  }\n\n  # Parse response\n  content_data &lt;- content(response, type = \"application/json\")\n\n  # Store in cache and return results\n  if (content_data$found &gt; 0) {\n    lat &lt;- content_data$results[[1]]$LATITUDE\n    lon &lt;- content_data$results[[1]]$LONGITUDE\n    result &lt;- data.frame(postcode = postcode, lat = lat, lon = lon)\n  } else {\n    result &lt;- data.frame(postcode = postcode, lat = NA, lon = NA)\n  }\n\n  assign(postcode, result, envir = cache)\n  return(result)\n}\n\n\n\n\n\n\nStep 2\nWe will now match Transaction (Q1_2024_Private) Tibble Dataframe’s unique postal code to our list of postal code extracted from OneMap.\n\n# Search 'Q1_2024_Private' dataframe for 'Postal Code' column\ndata_pc &lt;- unique(Q1_2024_Private$`Postal Code`)\n\n# Use futures for asynchronous processing\nresults &lt;- future_map(data_pc, fetch_geocode_data)\ncombined_results &lt;- bind_rows(results)\n\n# Combine results and filter out unsuccessful ones\nsuccessful_results &lt;- combined_results %&gt;%\n  filter(!is.na(lat) & !is.na(lon))\n\n# Write results to a CSV file\nwrite.csv(successful_results, file = \"data/PostalCodeList.csv\", row.names = FALSE)\n\n\nQ1_2024_Private_with_Coordinates &lt;- Q1_2024_Private %&gt;%\n  left_join(successful_results, by = c(\"Postal Code\" = \"postcode\"))\n\n\n\nStep 3 Importing Geospatial Data\nLoad Map into MPSZ\n\n# Instantiate the map from MPSZ 2019\nmpsz &lt;- st_read(dsn = \"data/\",\n                layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `/Users/youting/ytquek/ISSS608-VAA/take_home_ex/data' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n# Remove rows where latitude or longitude is NA\nQ1_2024_Private_with_Coordinates &lt;- Q1_2024_Private_with_Coordinates %&gt;%\n  filter(!is.na(lat) & !is.na(lon))\n\nq1_2024_sf &lt;- st_as_sf(Q1_2024_Private_with_Coordinates ,\n                       coords = c(\"lon\", \"lat\"),\n                       crs =4326) %&gt;%\n  st_transform(crs = 3414)\n\n\n\nStep 4 - Extracting study data (Average Transacted Price)\nWe will filter out the column data - Transacted Price, PSF & Planning Area which is required for a drill-down analysis on consumer pattern.\n\nq1_avg_txn &lt;- Q1_2024_Private_with_Coordinates %&gt;%\n    group_by(`Planning Area`) %&gt;%\n    summarise(Avg_Transacted_Price = mean(`Transacted Price ($)`, na.rm = TRUE))\nq1_avg_txn &lt;- q1_avg_txn %&gt;%\n    mutate(`Planning Area` = toupper(`Planning Area`))\nq1_avg_txn &lt;- st_drop_geometry(q1_avg_txn)\n\n\nq1_avg_psf &lt;- Q1_2024_Private_with_Coordinates %&gt;%\n    group_by(`Planning Area`) %&gt;%\n    summarise(Avg_Transacted_PSF = mean(`Unit Price ($ PSF)`, na.rm = TRUE))\nq1_avg_psf &lt;- q1_avg_psf %&gt;%\n    mutate(`Planning Area` = toupper(`Planning Area`))\nq1_avg_psf &lt;- st_drop_geometry(q1_avg_psf)\n\n\n\nStep 5 - Geospatial Data Wrangling\n\nAverage Transacted Price ( Planning Region )Average PSF ( Planning Region )\n\n\n\nmpsz_avg_txn_px &lt;- mpsz %&gt;%\n    left_join(\n        q1_avg_txn,\n        by = c(\"PLN_AREA_N\" = \"Planning Area\")\n    ) %&gt;% drop_na()\n\ntmap_mode(\"view\")\n\nmap2 &lt;- tm_shape(mpsz_avg_txn_px) +\n    tm_polygons(col = \"Avg_Transacted_Price\", \n                palette = \"YlOrRd\",\n                alpha = 0.3,\n                style = \"quantile\",\n                n = 7) +\n    tmap_options(check.and.fix = TRUE) +\n  tm_view(set.zoom.limits = c(11,14))\n\nmap2\n\n\n\n\n\n\n\n\n\nmpsz_avg_psf &lt;- mpsz %&gt;%\n    left_join(\n        q1_avg_psf,\n        by = c(\"PLN_AREA_N\" = \"Planning Area\")\n    ) %&gt;% drop_na()\n\ntmap_mode(\"view\")\n\nmap3 &lt;- tm_shape(mpsz_avg_psf) +\n    tm_polygons(col = \"Avg_Transacted_PSF\",\n                palette = \"YlOrRd\", \n                alpha = 0.3,\n                style = \"quantile\",\n                n = 7) +\n    tmap_options(check.and.fix = TRUE) +\n  tm_view(set.zoom.limits = c(11,14))\n\nmap3"
  },
  {
    "objectID": "take_home_ex/take_home_ex1.html#average-transaction-price-by-sale-type-and-region",
    "href": "take_home_ex/take_home_ex1.html#average-transaction-price-by-sale-type-and-region",
    "title": "Take Home Exercise 1",
    "section": "Average Transaction Price by Sale Type and Region",
    "text": "Average Transaction Price by Sale Type and Region\nUsing Geospatial mapping later, we notice can now see clearly from a macro POV that the price distribution by PSF in Singapore.\nHowever, our literature research also shows that there are experts who claims that prices of properties are also affected by their age and sale type.\n\nlibrary(ggthemes)\n\nq1_psf &lt;- Q1_2024_Private %&gt;%\n  group_by(`Type of Sale` , `Planning Region`) %&gt;%\n  summarize(`Average PSF` = mean(`Unit Price ($ PSF)`), .groups = \"drop\")\nq1_psf\n\n# A tibble: 15 × 3\n   `Type of Sale` `Planning Region` `Average PSF`\n   &lt;chr&gt;          &lt;chr&gt;                     &lt;dbl&gt;\n 1 New Sale       Central Region            2682.\n 2 New Sale       East Region               1793.\n 3 New Sale       North East Region         2161.\n 4 New Sale       North Region              1319.\n 5 New Sale       West Region               1911.\n 6 Resale         Central Region            1895.\n 7 Resale         East Region               1369.\n 8 Resale         North East Region         1440.\n 9 Resale         North Region              1213.\n10 Resale         West Region               1376.\n11 Sub Sale       Central Region            2154.\n12 Sub Sale       East Region               1659.\n13 Sub Sale       North East Region         1729.\n14 Sub Sale       North Region              1485 \n15 Sub Sale       West Region               1995.\n\n# Calculate overall mean of 'Average PSF'\noverall_mean &lt;- mean(q1_psf$`Average PSF`)\n\nggplot(q1_psf, aes(x = `Planning Region`, y = `Average PSF`, fill = `Type of Sale`)) +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  geom_hline(yintercept = overall_mean, linetype = \"dashed\", color = \"black\") +\n  theme_minimal() +\n  labs(title = \"Average PSF by Region and Type of Sale\",\n       x = \"Planning Region\",\n       y = \"Average PSF\",\n       fill = \"Type of Sale\") +\n  scale_fill_manual(values = c(\"New Sale\" = \"blue\", \"Resale\" = \"red\", \"Sub Sale\" = \"orange\")) +   annotate(\"text\", x = Inf, y = overall_mean, label = paste(\"Average PSF:\", round(overall_mean, 2)), \n           vjust = -0.5, hjust = 1.1, color = \"black\", size = 3.5)\n\n\n\n\n\n\n\n\n\n\nObservation of PSF prices for all transactions\n\n\n\nObserving the bar chart, we can note that the Central Region exhibits the highest Average PSF for new sales, which is significantly above the overall average. In contrast, the North Region presents the lowest Average PSF figures for both new sales and resales.\nLastly, the chart also shows a clear trend where new sales consistently have higher Average PSF values compared to resales across all regions. The additional category of ‘Sub Sale’—present only for the East Region—falls below the overall mean. The overall mean PSF, marked by the dashed line, lies just below the Average PSF for resales in the Central Region, suggesting a higher concentration of sales with above-average prices in that region."
  },
  {
    "objectID": "In_class_ex/hands-on_ex3_2.html",
    "href": "In_class_ex/hands-on_ex3_2.html",
    "title": "hands-on_ex3_2",
    "section": "",
    "text": "#Objectives - Create animated data visualisation by using gganimate and plotly r packages - Reshape data by using tidyr package - Process, wrangle and transform data by using dplyr package"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3_2.html#installing-and-loading-the-required-libraries",
    "href": "In_class_ex/hands-on_ex3_2.html#installing-and-loading-the-required-libraries",
    "title": "hands-on_ex3_2",
    "section": "Installing and loading the required libraries",
    "text": "Installing and loading the required libraries\nThe following R packages will be used:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3_2.html#importing-the-data",
    "href": "In_class_ex/hands-on_ex3_2.html#importing-the-data",
    "title": "hands-on_ex3_2",
    "section": "Importing the Data",
    "text": "Importing the Data\n\nThe code chunk below imports GlobalPopulation.xlsx into R environment by using read_xls() function of readr package.\nreadr is a pacakge within tidyverse.\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3_2.html#building-a-static-population-bubble-plot",
    "href": "In_class_ex/hands-on_ex3_2.html#building-a-static-population-bubble-plot",
    "title": "hands-on_ex3_2",
    "section": "Building a static population bubble plot",
    "text": "Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3_2.html#building-the-animated-bubble-plot",
    "href": "In_class_ex/hands-on_ex3_2.html#building-the-animated-bubble-plot",
    "title": "hands-on_ex3_2",
    "section": "Building the animated bubble plot",
    "text": "Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics.\n\nThe default is linear.\nOther methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3_2.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "In_class_ex/hands-on_ex3_2.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "hands-on_ex3_2",
    "section": "Building an animated bubble plot: ggplotly() method",
    "text": "Building an animated bubble plot: ggplotly() method\nCreate an animated bubble plot by using ggplotly() method.\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\nAlthough show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "In_class_ex/hands-on_ex3_2.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "In_class_ex/hands-on_ex3_2.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "hands-on_ex3_2",
    "section": "Building an animated bubble plot: plot_ly() method",
    "text": "Building an animated bubble plot: plot_ly() method\nCreate an animated bubble plot by using plot_ly() method.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  }
]