---
title: "Hands-on Exercise 8 Part I - Choropleth Mapping with R"
author: "You Ting QUEK"
date: "7 June, 2024"
date-modified: last-modified
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

Learning Objectives:

-   plot functional and truthful choropleth maps

# Getting Started

## Installing and loading the required libraries

The following R packages will be used:

-   Tidyverse:

    -   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

    -   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

    -   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data

-   tmap for plotting choropleth maps

Code chunk below will be used to check if these packages have been installed and also will load them into the working R environment.

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

## **Importing Data into R**

### **The Data**

Two data sets will be used to create the choropleth map:

-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format downloaded from [data.gov.sg](https://data.gov.sg/) This geospatial data consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.

-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data file downloaded from [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.

### **Importing Geospatial Data into R**

The code chunk below uses the *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.

```{r}
mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```

### **Examining the data content**

```{r}
mpsz
```

### **Importing Attribute Data into R**

Use *read_csv()* function of **readr** package to import *respopagsex2011to2020.csv* file into RStudio and save the file into an R dataframe called *popagsex*.

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

### **Data Preparation**

Before a thematic map can be prepared, a data table with year 2020 values needs to be prepped. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.

-   YOUNG: age group 0 to 4 until age groyup 20 to 24,

-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,

-   AGED: age group 65 and above,

-   TOTAL: all age group, and

-   DEPENDENCY: the ratio between young and aged against economy active group

#### Data wrangling

The following data wrangling and transformation functions will be used:

-   *pivot_wider()* of **tidyr** package

-   *mutate()*, *filter()*, *group_by()* and *select()* of **dplyr** package

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup() %>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

#### Joining the attribute data and geospatial data

The values of PA and SZ fields are a mix of upper and lower case. However, the values of SUBZONE_N and PLN_AREA_N are in upper case. Thus, we convert those of PA and SZ to uppercase, before we proceed with the join.

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = funs(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

*left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

::: callout-note
*left_join()* of **dplyr** package is used with `mpsz` simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.
:::

Save output into rds file

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

### **Choropleth Mapping Geospatial Data Using *tmap***

Two approaches can be used to prepare thematic map using *tmap*:

-   Plotting a thematic map quickly by using *qtm()*.

-   Plotting highly customisable thematic map by using tmap elements.

#### **Plotting a choropleth map quickly by using *qtm()***

The easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases.

The code chunk below will draw a cartographic standard choropleth map.

::: panel-tabset
## Plot

```{r,echo=FALSE}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

## Code

```{r,eval=FALSE}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```
:::

::: callout-note
-   *tmap_mode()* with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.

-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)
:::

### **Creating a choropleth map by using *tmap*’s elements**

To draw a high quality and highly customisable cartographic choropleth map, **tmap**’s drawing elements should be used.

::: panel-tabset
## Plot

```{r,echo=FALSE}

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

## Code

```{r,eval=FALSE}

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```
:::

#### Drawing a base map

The basic building block of **tmap** is *tm_shape()* followed by one or more layer elemments such as *tm_fill()* and *tm_polygons()*.

In the code chunk below, *tm_shape()* is used to define the input data (i.e *mpsz_pop2020*) and *tm_polygons()* is used to draw the planning subzone polygons.

::: panel-tabset
## Plot

```{r,echo=FALSE}

tm_shape(mpsz_pop2020) +
  tm_polygons()
```

## Code

```{r,eval=FALSE}

tm_shape(mpsz_pop2020) +
  tm_polygons()
```
:::

### Drawing a choropleth map using *tm_polygons()*

To draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, the target variable such as *Dependency* needs to be assigned to *tm_polygons()*.

::: panel-tabset
## Plot

```{r,echo=FALSE}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

## Code

```{r,eval=FALSE}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```
:::

::: callout-note
-   The default interval binning used to draw the choropleth map is called “pretty”.

-   The default colour scheme used is `YlOrRd` of ColorBrewer.

-   By default, Missing value will be shaded in grey.
:::

#### Drawing a choropleth map using *tm_fill()* and tm_border()

*tm_polygons()* is a wraper of *tm_fill()* and *tm_border()*. *tm_fill()* shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.

The code chunk below draws a choropleth map by using *tm_fill()* alone. Note that the planning subzones are shared according to the respective dependecy values.

::: panel-tabset
## Plot

```{r,echo=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

## Code

```{r,echo=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```
:::

tm_borders will be used to add the boundary of the planning subzones.

::: panel-tabset
## Plot

```{r,echo=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

## Code

```{r,eval=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```
:::

::: callout-note
Note that light-gray border lines have been added to the choropleth map.

The *alpha* argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value is 1.

Besides *alpha* argument, there are three other arguments for *tm_borders()*:

-   *col* = border colour,

-   *lwd* = border line width. The default is 1, and

-   *lty* = border line type. The default is “solid”.
:::

### **Data classification methods of tmap**

Most choropleth maps employ some methods of data classification to take a large number of observations and group them into data ranges or classes.

**tmap** provides a ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.

To define a data classification method, the *style* argument of *tm_fill()* or *tm_polygons()* is used.

#### Plotting choropleth maps with built-in classification methods

The code chunk below shows a quantile data classification with 5 classes.

::: panel-tabset
## Plot

```{r, echo=FALSE}

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

## Code

```{r, eval=FALSE}

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```
:::

In the code chunk below, the *equal* data classification method is used.

::: panel-tabset
## Plot

```{r,echo=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

## Code

```{r,eval=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```
:::

::: callout-note
Tthe distribution of quantile data classification method are more evenly distributed then equal data classification method
:::

#### Plotting choropleth map with custome break

For all built-in styles, category breaks are computed internally. To override these defaults, the breakpoints can be set explicitly using the *breaks* argument to the *tm_fill()*.

Note: **tmap** breaks include a minimum and maximum. Thus, to end up with n categories, n+1 elements must be specified in the *breaks* option (the values must be in increasing order).

Code chunk below will be used to compute and display the descriptive statistics of **DEPENDENCY** field in order to get descriptive statistics on the variable to aid setting break points.

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

With reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our *breaks* vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)

The choropleth map is plotted with the above values by the code chunk below.

::: panel-tabset
## Plot

```{r,echo=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

## Code

```{r,eval=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```
:::

### **Colour Scheme**

**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.

#### Using ColourBrewer palette

To change the colour, assign the preferred colour to *palette* argument of *tm_fill()*

::: panel-tabset
## Plot

```{r,echo=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

## Code

```{r,eval=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```
:::

To reverse the colour shading, add a “-” prefix.

::: panel-tabset
## Plot

```{r,echo=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "-Blues") +
  tm_borders(alpha = 0.5)
```

## Code

```{r,eval=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "-Blues") +
  tm_borders(alpha = 0.5)
```
:::

### **Map Layouts**

Map layout refers to the combination of all map elements into a cohensive map. Map elements includes: objects to be mapped, title, scale bar, compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.

#### Map Legend

In **tmap**, several *legend* options are provided to change the placement, format and appearance of the legend.

::: panel-tabset
## Plot

```{r,echo=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

## Code

```{r,eval=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
:::

#### Map style

**tmap** allows a wide variety of layout settings to be changed using *tmap_style()*.

The code chunk below shows the *classic* style.

::: panel-tabset
## Plot

```{r,echo=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

## Code

```{r,eval=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```
:::

#### Cartographic Furniture

Beside map style, **tmap** also also draws other map furniture e.g., compass, scale bar and grid lines.

In the code chunk below, *tm_compass()*, *tm_scale_bar()* and *tm_grid()* are used to add compass, scale bar and grid lines onto the choropleth map.

::: panel-tabset
## Plot

```{r,echo=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

## Code

```{r,eval=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```
:::

To reset the default style

```{r}
tmap_style("white")
```

### **Drawing Small Multiple Choropleth Maps**

**Small multiple maps**, aka **facet maps**, are composed of many maps arranged side-by-side, and/or stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, e.g. time.

In **tmap**, small multiple maps can be plotted in three ways:

-   by assigning multiple values to at least one of the asthetic arguments

-   by defining a group-by variable in *tm_facets()*

-   by creating multiple stand-alone maps with *tmap_arrange()*.

#### Assigning multiple values to at least one of the aesthetic arguments

Small multiple choropleth maps are created by defining ***ncols*** in **tm_fill()**

::: panel-tabset
## Plot

```{r,echo=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

## Code

```{r,eval=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```
:::

small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments

::: panel-tabset
## Plot

```{r,echo=FALSE}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

## Code

```{r,eval=FALSE}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```
:::

#### Defining a group-by variable in *tm_facets()*

multiple small choropleth maps are created by using **tm_facets()**.

::: panel-tabset
## Plot

```{r,echo=FALSE}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=FALSE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

## Code

```{r,eval=FALSE}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=FALSE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```
:::

#### Creating multiple stand-alone maps with *tmap_arrange()*

multiple small choropleth maps are created by creating multiple stand-alone maps with **tmap_arrange()**.

::: panel-tabset
## Plot

```{r,echo=FALSE}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

## Code

```{r,eval=FALSE}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```
:::

### **Mappping Spatial Object Meeting a Selection Criterion**

Use selection funtion to map spatial objects meeting the selection criterion.

::: panel-tabset
## Plot

```{r,echo=FALSE}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

## Code

```{r,eval=FALSE}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
:::
