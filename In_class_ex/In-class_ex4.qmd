---
title: "In class exercise 4"
author: "You Ting QUEK"
date: "May 4, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

```{r}
pacman::p_load(tidyverse, ggstatsplot)
```

```{r}
exam <- read_csv("data/Exam_data.csv")
```

```{r}
set.seed(1234)

p <- gghistostats(
  data = exam,
  x = ENGLISH,
  type = "robust",
  test.value = 60,
  bin.args = list(color = "black",
                  fill = "grey 50",
                  alpha = 0.7),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth = 2),
  xlab = "English scores"
)


```

```{r}
##get the numbers
extract_stats(p)
```

```{r}

exam_long <- exam %>%
  pivot_longer(
    cols=ENGLISH:SCIENCE,
    names_to = "SUBJECT",
    values_to = "SCORES"
  ) %>%
  filter(CLASS == "3A")

```

```{r}
ggwithinstats (
  data = filter(exam_long, 
                SUBJECT %in%
                  c("MATHS", "SCIENCE")),
  x = SUBJECT,
  y = SCORES,
  type = "p"
)
```

```{r}
ggscatterstats(
  data = exam,
  x = MATHS,
  y = ENGLISH,
  marginal = TRUE,
  label.var = ID,
  label.expression = ENGLISH > 90 & MATHS > 90,
)
```

## Toyota sales exercise

```{r}
pacman::p_load(readxl, performance, parameters, see)
```

```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls", "data")
car_resale
```

### Multiple Regressions using lm()

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```

### Checking and plotting multicollinearity

```{r}
check_c <- check_collinearity(model)
plot(check_c)
```

### Checking for nomality assumption

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)

check_n <- check_normality(model1)
plot(check_n)
```

### Model Diagnostic: Check model for homogeneity of variances

```{r}
check_h <- check_heteroscedasticity(model1)
plot(check_h)
```

### Model diagnostic: Complete check

```{r}
check_model(model1)
```

## Visualising Regression param

```{r}
plot(parameters(model1))
```

```{r}
ggcoefstats(model1, 
            output = "plot")
```
